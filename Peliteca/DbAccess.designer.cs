#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34209
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Peliteca
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Peliteca")]
	public partial class DbAccessDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertActores(Actores instance);
    partial void UpdateActores(Actores instance);
    partial void DeleteActores(Actores instance);
    partial void InsertUsuarios(Usuarios instance);
    partial void UpdateUsuarios(Usuarios instance);
    partial void DeleteUsuarios(Usuarios instance);
    partial void InsertDirectores(Directores instance);
    partial void UpdateDirectores(Directores instance);
    partial void DeleteDirectores(Directores instance);
    partial void InsertGeneros(Generos instance);
    partial void UpdateGeneros(Generos instance);
    partial void DeleteGeneros(Generos instance);
    partial void InsertPaises(Paises instance);
    partial void UpdatePaises(Paises instance);
    partial void DeletePaises(Paises instance);
    partial void InsertPeliActor(PeliActor instance);
    partial void UpdatePeliActor(PeliActor instance);
    partial void DeletePeliActor(PeliActor instance);
    partial void InsertPeliculas(Peliculas instance);
    partial void UpdatePeliculas(Peliculas instance);
    partial void DeletePeliculas(Peliculas instance);
    partial void InsertPeliPais(PeliPais instance);
    partial void UpdatePeliPais(PeliPais instance);
    partial void DeletePeliPais(PeliPais instance);
    #endregion
		
		public DbAccessDataContext() : 
				base(global::Peliteca.Properties.Settings.Default.PelitecaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbAccessDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbAccessDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbAccessDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbAccessDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Actores> Actores
		{
			get
			{
				return this.GetTable<Actores>();
			}
		}
		
		public System.Data.Linq.Table<Usuarios> Usuarios
		{
			get
			{
				return this.GetTable<Usuarios>();
			}
		}
		
		public System.Data.Linq.Table<Directores> Directores
		{
			get
			{
				return this.GetTable<Directores>();
			}
		}
		
		public System.Data.Linq.Table<Generos> Generos
		{
			get
			{
				return this.GetTable<Generos>();
			}
		}
		
		public System.Data.Linq.Table<Paises> Paises
		{
			get
			{
				return this.GetTable<Paises>();
			}
		}
		
		public System.Data.Linq.Table<PeliActor> PeliActor
		{
			get
			{
				return this.GetTable<PeliActor>();
			}
		}
		
		public System.Data.Linq.Table<Peliculas> Peliculas
		{
			get
			{
				return this.GetTable<Peliculas>();
			}
		}
		
		public System.Data.Linq.Table<PeliPais> PeliPais
		{
			get
			{
				return this.GetTable<PeliPais>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Actores")]
	public partial class Actores : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idActor;
		
		private string _nomActor;
		
		private string _apeActor;
		
		private System.Nullable<bool> _sexo;
		
		private System.Nullable<System.DateTime> _fecNac;
		
		private EntitySet<PeliActor> _PeliActor;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidActorChanging(short value);
    partial void OnidActorChanged();
    partial void OnnomActorChanging(string value);
    partial void OnnomActorChanged();
    partial void OnapeActorChanging(string value);
    partial void OnapeActorChanged();
    partial void OnsexoChanging(System.Nullable<bool> value);
    partial void OnsexoChanged();
    partial void OnfecNacChanging(System.Nullable<System.DateTime> value);
    partial void OnfecNacChanged();
    #endregion
		
		public Actores()
		{
			this._PeliActor = new EntitySet<PeliActor>(new Action<PeliActor>(this.attach_PeliActor), new Action<PeliActor>(this.detach_PeliActor));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idActor", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idActor
		{
			get
			{
				return this._idActor;
			}
			set
			{
				if ((this._idActor != value))
				{
					this.OnidActorChanging(value);
					this.SendPropertyChanging();
					this._idActor = value;
					this.SendPropertyChanged("idActor");
					this.OnidActorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomActor", DbType="NVarChar(20)")]
		public string nomActor
		{
			get
			{
				return this._nomActor;
			}
			set
			{
				if ((this._nomActor != value))
				{
					this.OnnomActorChanging(value);
					this.SendPropertyChanging();
					this._nomActor = value;
					this.SendPropertyChanged("nomActor");
					this.OnnomActorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_apeActor", DbType="NVarChar(20)")]
		public string apeActor
		{
			get
			{
				return this._apeActor;
			}
			set
			{
				if ((this._apeActor != value))
				{
					this.OnapeActorChanging(value);
					this.SendPropertyChanging();
					this._apeActor = value;
					this.SendPropertyChanged("apeActor");
					this.OnapeActorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sexo", DbType="Bit")]
		public System.Nullable<bool> sexo
		{
			get
			{
				return this._sexo;
			}
			set
			{
				if ((this._sexo != value))
				{
					this.OnsexoChanging(value);
					this.SendPropertyChanging();
					this._sexo = value;
					this.SendPropertyChanged("sexo");
					this.OnsexoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fecNac", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> fecNac
		{
			get
			{
				return this._fecNac;
			}
			set
			{
				if ((this._fecNac != value))
				{
					this.OnfecNacChanging(value);
					this.SendPropertyChanging();
					this._fecNac = value;
					this.SendPropertyChanged("fecNac");
					this.OnfecNacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Actores_PeliActor", Storage="_PeliActor", ThisKey="idActor", OtherKey="idActor")]
		public EntitySet<PeliActor> PeliActor
		{
			get
			{
				return this._PeliActor;
			}
			set
			{
				this._PeliActor.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PeliActor(PeliActor entity)
		{
			this.SendPropertyChanging();
			entity.Actores = this;
		}
		
		private void detach_PeliActor(PeliActor entity)
		{
			this.SendPropertyChanging();
			entity.Actores = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usuarios")]
	public partial class Usuarios : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _nomUser;
		
		private string _passUser;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnomUserChanging(string value);
    partial void OnnomUserChanged();
    partial void OnpassUserChanging(string value);
    partial void OnpassUserChanged();
    #endregion
		
		public Usuarios()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomUser", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string nomUser
		{
			get
			{
				return this._nomUser;
			}
			set
			{
				if ((this._nomUser != value))
				{
					this.OnnomUserChanging(value);
					this.SendPropertyChanging();
					this._nomUser = value;
					this.SendPropertyChanged("nomUser");
					this.OnnomUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passUser", DbType="NVarChar(15)")]
		public string passUser
		{
			get
			{
				return this._passUser;
			}
			set
			{
				if ((this._passUser != value))
				{
					this.OnpassUserChanging(value);
					this.SendPropertyChanging();
					this._passUser = value;
					this.SendPropertyChanged("passUser");
					this.OnpassUserChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Directores")]
	public partial class Directores : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idDirec;
		
		private string _nomDirec;
		
		private string _apeDirec;
		
		private System.Nullable<System.DateTime> _fecNac;
		
		private EntitySet<Peliculas> _Peliculas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidDirecChanging(short value);
    partial void OnidDirecChanged();
    partial void OnnomDirecChanging(string value);
    partial void OnnomDirecChanged();
    partial void OnapeDirecChanging(string value);
    partial void OnapeDirecChanged();
    partial void OnfecNacChanging(System.Nullable<System.DateTime> value);
    partial void OnfecNacChanged();
    #endregion
		
		public Directores()
		{
			this._Peliculas = new EntitySet<Peliculas>(new Action<Peliculas>(this.attach_Peliculas), new Action<Peliculas>(this.detach_Peliculas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDirec", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idDirec
		{
			get
			{
				return this._idDirec;
			}
			set
			{
				if ((this._idDirec != value))
				{
					this.OnidDirecChanging(value);
					this.SendPropertyChanging();
					this._idDirec = value;
					this.SendPropertyChanged("idDirec");
					this.OnidDirecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomDirec", DbType="NVarChar(20)")]
		public string nomDirec
		{
			get
			{
				return this._nomDirec;
			}
			set
			{
				if ((this._nomDirec != value))
				{
					this.OnnomDirecChanging(value);
					this.SendPropertyChanging();
					this._nomDirec = value;
					this.SendPropertyChanged("nomDirec");
					this.OnnomDirecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_apeDirec", DbType="NVarChar(20)")]
		public string apeDirec
		{
			get
			{
				return this._apeDirec;
			}
			set
			{
				if ((this._apeDirec != value))
				{
					this.OnapeDirecChanging(value);
					this.SendPropertyChanging();
					this._apeDirec = value;
					this.SendPropertyChanged("apeDirec");
					this.OnapeDirecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fecNac", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> fecNac
		{
			get
			{
				return this._fecNac;
			}
			set
			{
				if ((this._fecNac != value))
				{
					this.OnfecNacChanging(value);
					this.SendPropertyChanging();
					this._fecNac = value;
					this.SendPropertyChanged("fecNac");
					this.OnfecNacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directores_Peliculas", Storage="_Peliculas", ThisKey="idDirec", OtherKey="idDirec")]
		public EntitySet<Peliculas> Peliculas
		{
			get
			{
				return this._Peliculas;
			}
			set
			{
				this._Peliculas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Peliculas(Peliculas entity)
		{
			this.SendPropertyChanging();
			entity.Directores = this;
		}
		
		private void detach_Peliculas(Peliculas entity)
		{
			this.SendPropertyChanging();
			entity.Directores = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Generos")]
	public partial class Generos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idGen;
		
		private string _genero;
		
		private EntitySet<Peliculas> _Peliculas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGenChanging(short value);
    partial void OnidGenChanged();
    partial void OngeneroChanging(string value);
    partial void OngeneroChanged();
    #endregion
		
		public Generos()
		{
			this._Peliculas = new EntitySet<Peliculas>(new Action<Peliculas>(this.attach_Peliculas), new Action<Peliculas>(this.detach_Peliculas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGen", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idGen
		{
			get
			{
				return this._idGen;
			}
			set
			{
				if ((this._idGen != value))
				{
					this.OnidGenChanging(value);
					this.SendPropertyChanging();
					this._idGen = value;
					this.SendPropertyChanged("idGen");
					this.OnidGenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genero", DbType="NVarChar(25)")]
		public string genero
		{
			get
			{
				return this._genero;
			}
			set
			{
				if ((this._genero != value))
				{
					this.OngeneroChanging(value);
					this.SendPropertyChanging();
					this._genero = value;
					this.SendPropertyChanged("genero");
					this.OngeneroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Generos_Peliculas", Storage="_Peliculas", ThisKey="idGen", OtherKey="idGen")]
		public EntitySet<Peliculas> Peliculas
		{
			get
			{
				return this._Peliculas;
			}
			set
			{
				this._Peliculas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Peliculas(Peliculas entity)
		{
			this.SendPropertyChanging();
			entity.Generos = this;
		}
		
		private void detach_Peliculas(Peliculas entity)
		{
			this.SendPropertyChanging();
			entity.Generos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paises")]
	public partial class Paises : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idPais;
		
		private string _pais;
		
		private EntitySet<PeliPais> _PeliPais;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPaisChanging(short value);
    partial void OnidPaisChanged();
    partial void OnpaisChanging(string value);
    partial void OnpaisChanged();
    #endregion
		
		public Paises()
		{
			this._PeliPais = new EntitySet<PeliPais>(new Action<PeliPais>(this.attach_PeliPais), new Action<PeliPais>(this.detach_PeliPais));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPais", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idPais
		{
			get
			{
				return this._idPais;
			}
			set
			{
				if ((this._idPais != value))
				{
					this.OnidPaisChanging(value);
					this.SendPropertyChanging();
					this._idPais = value;
					this.SendPropertyChanged("idPais");
					this.OnidPaisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pais", DbType="NVarChar(35)")]
		public string pais
		{
			get
			{
				return this._pais;
			}
			set
			{
				if ((this._pais != value))
				{
					this.OnpaisChanging(value);
					this.SendPropertyChanging();
					this._pais = value;
					this.SendPropertyChanged("pais");
					this.OnpaisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paises_PeliPais", Storage="_PeliPais", ThisKey="idPais", OtherKey="idPais")]
		public EntitySet<PeliPais> PeliPais
		{
			get
			{
				return this._PeliPais;
			}
			set
			{
				this._PeliPais.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PeliPais(PeliPais entity)
		{
			this.SendPropertyChanging();
			entity.Paises = this;
		}
		
		private void detach_PeliPais(PeliPais entity)
		{
			this.SendPropertyChanging();
			entity.Paises = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PeliActor")]
	public partial class PeliActor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPeli;
		
		private short _idActor;
		
		private EntityRef<Actores> _Actores;
		
		private EntityRef<Peliculas> _Peliculas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPeliChanging(int value);
    partial void OnidPeliChanged();
    partial void OnidActorChanging(short value);
    partial void OnidActorChanged();
    #endregion
		
		public PeliActor()
		{
			this._Actores = default(EntityRef<Actores>);
			this._Peliculas = default(EntityRef<Peliculas>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPeli", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idPeli
		{
			get
			{
				return this._idPeli;
			}
			set
			{
				if ((this._idPeli != value))
				{
					if (this._Peliculas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPeliChanging(value);
					this.SendPropertyChanging();
					this._idPeli = value;
					this.SendPropertyChanged("idPeli");
					this.OnidPeliChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idActor", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short idActor
		{
			get
			{
				return this._idActor;
			}
			set
			{
				if ((this._idActor != value))
				{
					if (this._Actores.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidActorChanging(value);
					this.SendPropertyChanging();
					this._idActor = value;
					this.SendPropertyChanged("idActor");
					this.OnidActorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Actores_PeliActor", Storage="_Actores", ThisKey="idActor", OtherKey="idActor", IsForeignKey=true)]
		public Actores Actores
		{
			get
			{
				return this._Actores.Entity;
			}
			set
			{
				Actores previousValue = this._Actores.Entity;
				if (((previousValue != value) 
							|| (this._Actores.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actores.Entity = null;
						previousValue.PeliActor.Remove(this);
					}
					this._Actores.Entity = value;
					if ((value != null))
					{
						value.PeliActor.Add(this);
						this._idActor = value.idActor;
					}
					else
					{
						this._idActor = default(short);
					}
					this.SendPropertyChanged("Actores");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Peliculas_PeliActor", Storage="_Peliculas", ThisKey="idPeli", OtherKey="idPeli", IsForeignKey=true)]
		public Peliculas Peliculas
		{
			get
			{
				return this._Peliculas.Entity;
			}
			set
			{
				Peliculas previousValue = this._Peliculas.Entity;
				if (((previousValue != value) 
							|| (this._Peliculas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Peliculas.Entity = null;
						previousValue.PeliActor.Remove(this);
					}
					this._Peliculas.Entity = value;
					if ((value != null))
					{
						value.PeliActor.Add(this);
						this._idPeli = value.idPeli;
					}
					else
					{
						this._idPeli = default(int);
					}
					this.SendPropertyChanged("Peliculas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Peliculas")]
	public partial class Peliculas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPeli;
		
		private string _titulo;
		
		private System.Nullable<short> _idDirec;
		
		private System.Nullable<short> _anio;
		
		private System.Nullable<short> _idGen;
		
		private System.Nullable<byte> _duracion;
		
		private System.Data.Linq.Binary _foto;
		
		private EntitySet<PeliActor> _PeliActor;
		
		private EntitySet<PeliPais> _PeliPais;
		
		private EntityRef<Directores> _Directores;
		
		private EntityRef<Generos> _Generos;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPeliChanging(int value);
    partial void OnidPeliChanged();
    partial void OntituloChanging(string value);
    partial void OntituloChanged();
    partial void OnidDirecChanging(System.Nullable<short> value);
    partial void OnidDirecChanged();
    partial void OnanioChanging(System.Nullable<short> value);
    partial void OnanioChanged();
    partial void OnidGenChanging(System.Nullable<short> value);
    partial void OnidGenChanged();
    partial void OnduracionChanging(System.Nullable<byte> value);
    partial void OnduracionChanged();
    partial void OnfotoChanging(System.Data.Linq.Binary value);
    partial void OnfotoChanged();
    #endregion
		
		public Peliculas()
		{
			this._PeliActor = new EntitySet<PeliActor>(new Action<PeliActor>(this.attach_PeliActor), new Action<PeliActor>(this.detach_PeliActor));
			this._PeliPais = new EntitySet<PeliPais>(new Action<PeliPais>(this.attach_PeliPais), new Action<PeliPais>(this.detach_PeliPais));
			this._Directores = default(EntityRef<Directores>);
			this._Generos = default(EntityRef<Generos>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPeli", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPeli
		{
			get
			{
				return this._idPeli;
			}
			set
			{
				if ((this._idPeli != value))
				{
					this.OnidPeliChanging(value);
					this.SendPropertyChanging();
					this._idPeli = value;
					this.SendPropertyChanged("idPeli");
					this.OnidPeliChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_titulo", DbType="NVarChar(50)")]
		public string titulo
		{
			get
			{
				return this._titulo;
			}
			set
			{
				if ((this._titulo != value))
				{
					this.OntituloChanging(value);
					this.SendPropertyChanging();
					this._titulo = value;
					this.SendPropertyChanged("titulo");
					this.OntituloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDirec", DbType="SmallInt")]
		public System.Nullable<short> idDirec
		{
			get
			{
				return this._idDirec;
			}
			set
			{
				if ((this._idDirec != value))
				{
					if (this._Directores.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDirecChanging(value);
					this.SendPropertyChanging();
					this._idDirec = value;
					this.SendPropertyChanged("idDirec");
					this.OnidDirecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_anio", DbType="SmallInt")]
		public System.Nullable<short> anio
		{
			get
			{
				return this._anio;
			}
			set
			{
				if ((this._anio != value))
				{
					this.OnanioChanging(value);
					this.SendPropertyChanging();
					this._anio = value;
					this.SendPropertyChanged("anio");
					this.OnanioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGen", DbType="SmallInt")]
		public System.Nullable<short> idGen
		{
			get
			{
				return this._idGen;
			}
			set
			{
				if ((this._idGen != value))
				{
					if (this._Generos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGenChanging(value);
					this.SendPropertyChanging();
					this._idGen = value;
					this.SendPropertyChanged("idGen");
					this.OnidGenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duracion", DbType="TinyInt")]
		public System.Nullable<byte> duracion
		{
			get
			{
				return this._duracion;
			}
			set
			{
				if ((this._duracion != value))
				{
					this.OnduracionChanging(value);
					this.SendPropertyChanging();
					this._duracion = value;
					this.SendPropertyChanged("duracion");
					this.OnduracionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foto", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary foto
		{
			get
			{
				return this._foto;
			}
			set
			{
				if ((this._foto != value))
				{
					this.OnfotoChanging(value);
					this.SendPropertyChanging();
					this._foto = value;
					this.SendPropertyChanged("foto");
					this.OnfotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Peliculas_PeliActor", Storage="_PeliActor", ThisKey="idPeli", OtherKey="idPeli")]
		public EntitySet<PeliActor> PeliActor
		{
			get
			{
				return this._PeliActor;
			}
			set
			{
				this._PeliActor.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Peliculas_PeliPais", Storage="_PeliPais", ThisKey="idPeli", OtherKey="idPeli")]
		public EntitySet<PeliPais> PeliPais
		{
			get
			{
				return this._PeliPais;
			}
			set
			{
				this._PeliPais.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directores_Peliculas", Storage="_Directores", ThisKey="idDirec", OtherKey="idDirec", IsForeignKey=true)]
		public Directores Directores
		{
			get
			{
				return this._Directores.Entity;
			}
			set
			{
				Directores previousValue = this._Directores.Entity;
				if (((previousValue != value) 
							|| (this._Directores.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directores.Entity = null;
						previousValue.Peliculas.Remove(this);
					}
					this._Directores.Entity = value;
					if ((value != null))
					{
						value.Peliculas.Add(this);
						this._idDirec = value.idDirec;
					}
					else
					{
						this._idDirec = default(Nullable<short>);
					}
					this.SendPropertyChanged("Directores");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Generos_Peliculas", Storage="_Generos", ThisKey="idGen", OtherKey="idGen", IsForeignKey=true)]
		public Generos Generos
		{
			get
			{
				return this._Generos.Entity;
			}
			set
			{
				Generos previousValue = this._Generos.Entity;
				if (((previousValue != value) 
							|| (this._Generos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Generos.Entity = null;
						previousValue.Peliculas.Remove(this);
					}
					this._Generos.Entity = value;
					if ((value != null))
					{
						value.Peliculas.Add(this);
						this._idGen = value.idGen;
					}
					else
					{
						this._idGen = default(Nullable<short>);
					}
					this.SendPropertyChanged("Generos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PeliActor(PeliActor entity)
		{
			this.SendPropertyChanging();
			entity.Peliculas = this;
		}
		
		private void detach_PeliActor(PeliActor entity)
		{
			this.SendPropertyChanging();
			entity.Peliculas = null;
		}
		
		private void attach_PeliPais(PeliPais entity)
		{
			this.SendPropertyChanging();
			entity.Peliculas = this;
		}
		
		private void detach_PeliPais(PeliPais entity)
		{
			this.SendPropertyChanging();
			entity.Peliculas = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PeliPais")]
	public partial class PeliPais : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPeli;
		
		private short _idPais;
		
		private EntityRef<Paises> _Paises;
		
		private EntityRef<Peliculas> _Peliculas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPeliChanging(int value);
    partial void OnidPeliChanged();
    partial void OnidPaisChanging(short value);
    partial void OnidPaisChanged();
    #endregion
		
		public PeliPais()
		{
			this._Paises = default(EntityRef<Paises>);
			this._Peliculas = default(EntityRef<Peliculas>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPeli", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idPeli
		{
			get
			{
				return this._idPeli;
			}
			set
			{
				if ((this._idPeli != value))
				{
					if (this._Peliculas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPeliChanging(value);
					this.SendPropertyChanging();
					this._idPeli = value;
					this.SendPropertyChanged("idPeli");
					this.OnidPeliChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPais", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short idPais
		{
			get
			{
				return this._idPais;
			}
			set
			{
				if ((this._idPais != value))
				{
					if (this._Paises.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPaisChanging(value);
					this.SendPropertyChanging();
					this._idPais = value;
					this.SendPropertyChanged("idPais");
					this.OnidPaisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paises_PeliPais", Storage="_Paises", ThisKey="idPais", OtherKey="idPais", IsForeignKey=true)]
		public Paises Paises
		{
			get
			{
				return this._Paises.Entity;
			}
			set
			{
				Paises previousValue = this._Paises.Entity;
				if (((previousValue != value) 
							|| (this._Paises.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paises.Entity = null;
						previousValue.PeliPais.Remove(this);
					}
					this._Paises.Entity = value;
					if ((value != null))
					{
						value.PeliPais.Add(this);
						this._idPais = value.idPais;
					}
					else
					{
						this._idPais = default(short);
					}
					this.SendPropertyChanged("Paises");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Peliculas_PeliPais", Storage="_Peliculas", ThisKey="idPeli", OtherKey="idPeli", IsForeignKey=true)]
		public Peliculas Peliculas
		{
			get
			{
				return this._Peliculas.Entity;
			}
			set
			{
				Peliculas previousValue = this._Peliculas.Entity;
				if (((previousValue != value) 
							|| (this._Peliculas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Peliculas.Entity = null;
						previousValue.PeliPais.Remove(this);
					}
					this._Peliculas.Entity = value;
					if ((value != null))
					{
						value.PeliPais.Add(this);
						this._idPeli = value.idPeli;
					}
					else
					{
						this._idPeli = default(int);
					}
					this.SendPropertyChanged("Peliculas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
